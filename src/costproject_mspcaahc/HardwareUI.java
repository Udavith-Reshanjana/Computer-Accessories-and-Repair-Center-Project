/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package costproject_mspcaahc;

import ProjectClasses.BrandNewHardware;
import ProjectClasses.ElectronicDevice;
import ProjectClasses.SecondHandHardware;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lenovo
 */
public class HardwareUI extends javax.swing.JFrame {

    ElectronicDevice electronicDevice;
    BrandNewHardware brandNewHardware;
    SecondHandHardware secondHandHardware;
    /**
     * Creates new form HardwareUI
     */
    public HardwareUI() {
        initComponents();
        electronicDevice = new ElectronicDevice();
        electronicDevice.showHardwareDetails(hardwareTable);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        backToLogin = new javax.swing.JToggleButton();
        repair = new javax.swing.JToggleButton();
        payment = new javax.swing.JToggleButton();
        employee = new javax.swing.JToggleButton();
        customer = new javax.swing.JToggleButton();
        close = new javax.swing.JButton();
        mainDashboard = new javax.swing.JToggleButton();
        jLabel2 = new javax.swing.JLabel();
        hardwareID = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        brandName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        hardwareType = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        unitPrice = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        qty = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        usageTime = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        hardwareName = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        importedCountry = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        hardwareTable = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        hardwareBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setMaximumSize(new java.awt.Dimension(1366, 768));
        jPanel1.setMinimumSize(new java.awt.Dimension(1366, 768));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        backToLogin.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        backToLogin.setForeground(new java.awt.Color(0, 102, 255));
        backToLogin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-login-64.png"))); // NOI18N
        backToLogin.setText("Back to Login");
        backToLogin.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backToLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backToLoginActionPerformed(evt);
            }
        });
        jPanel1.add(backToLogin, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 640, 390, 80));

        repair.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        repair.setForeground(new java.awt.Color(0, 102, 255));
        repair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-repair-64.png"))); // NOI18N
        repair.setText("Repair");
        repair.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        repair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                repairActionPerformed(evt);
            }
        });
        jPanel1.add(repair, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 550, 390, 80));

        payment.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        payment.setForeground(new java.awt.Color(0, 102, 255));
        payment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-payment-64.png"))); // NOI18N
        payment.setText("Payment");
        payment.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        payment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentActionPerformed(evt);
            }
        });
        jPanel1.add(payment, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 460, 390, 80));

        employee.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        employee.setForeground(new java.awt.Color(0, 102, 255));
        employee.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-employee-64.png"))); // NOI18N
        employee.setText("Employee");
        employee.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        employee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeActionPerformed(evt);
            }
        });
        jPanel1.add(employee, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 370, 390, 80));

        customer.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        customer.setForeground(new java.awt.Color(0, 102, 255));
        customer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-customer-64.png"))); // NOI18N
        customer.setText("Customer");
        customer.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        customer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerActionPerformed(evt);
            }
        });
        jPanel1.add(customer, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 290, 390, 70));

        close.setBackground(new java.awt.Color(255, 0, 51));
        close.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        close.setForeground(new java.awt.Color(255, 255, 255));
        close.setText("X");
        close.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeActionPerformed(evt);
            }
        });
        jPanel1.add(close, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 0, 180, 50));

        mainDashboard.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        mainDashboard.setForeground(new java.awt.Color(0, 102, 255));
        mainDashboard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-dashboard-64.png"))); // NOI18N
        mainDashboard.setText("Dashboard");
        mainDashboard.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        mainDashboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainDashboardActionPerformed(evt);
            }
        });
        jPanel1.add(mainDashboard, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 200, 390, 80));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Hardware ID");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 90, -1, -1));
        jPanel1.add(hardwareID, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 120, 120, 30));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Brand Name");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 90, -1, -1));
        jPanel1.add(brandName, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 120, 110, 30));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Type");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 90, -1, -1));

        hardwareType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Brand New", "Second Hand" }));
        jPanel1.add(hardwareType, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 120, 130, 30));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("Unit Price");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 90, -1, -1));
        jPanel1.add(unitPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 120, 120, 30));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("Quantity");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 90, -1, -1));

        qty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qtyActionPerformed(evt);
            }
        });
        jPanel1.add(qty, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 120, 80, 30));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setText("Usage Time");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(1230, 90, -1, -1));
        jPanel1.add(usageTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 120, 140, 30));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Hardware Name");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 190, -1, -1));

        hardwareName.setColumns(20);
        hardwareName.setRows(5);
        jScrollPane1.setViewportView(hardwareName);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 220, 270, 100));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setText("Imported Country");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 190, -1, -1));
        jPanel1.add(importedCountry, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 220, 160, 30));

        addButton.setText("ADD");
        addButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jPanel1.add(addButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 330, 90, -1));

        updateButton.setText("UPDATE");
        updateButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        jPanel1.add(updateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 330, -1, -1));

        deleteButton.setText("DELETE");
        deleteButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        jPanel1.add(deleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1160, 330, -1, -1));

        clearButton.setText("CLEAR");
        clearButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        jPanel1.add(clearButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1260, 330, -1, -1));

        hardwareTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Hardware ID", "Hardwar Name", "Brand Name", "Hardware Type", "Unit Price", "Quantity", "Imported Country", "Used Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        hardwareTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        hardwareTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                hardwareTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(hardwareTable);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(522, 430, 830, 330));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 102, 204));
        jLabel9.setText("Overall Hardware Details");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 400, 230, 20));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 102, 204));
        jLabel10.setText("Hardware Details");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 50, 190, 20));

        hardwareBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/HardwareUI.png"))); // NOI18N
        jPanel1.add(hardwareBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1366, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 768, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backToLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backToLoginActionPerformed
        // TODO add your handling code here:
        MainLoginUI mainLoginUI = new MainLoginUI();
        mainLoginUI.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_backToLoginActionPerformed

    private void repairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_repairActionPerformed
        // TODO add your handling code here:
        MainRepair mainRepair = new MainRepair();
        mainRepair.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_repairActionPerformed

    private void employeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeActionPerformed
        // TODO add your handling code here:
        EmployeeUI employeeUI = new EmployeeUI();
        employeeUI.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_employeeActionPerformed

    private void customerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerActionPerformed
        // TODO add your handling code here:
        MainCustomerUI mainCustomerUI = new MainCustomerUI();
        this.setVisible(false);
        mainCustomerUI.setVisible(true);
    }//GEN-LAST:event_customerActionPerformed

    private void closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_closeActionPerformed

    private void mainDashboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainDashboardActionPerformed
        // TODO add your handling code here:
        MainDashboard mainDashboard = new MainDashboard();
        mainDashboard.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_mainDashboardActionPerformed

    private void qtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qtyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_qtyActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        String getHardwareID = hardwareID.getText().trim();
        String getHardwareName = hardwareName.getText().trim();
        String getHardwareType = hardwareType.getSelectedItem().toString().trim();
        String getBrandName = brandName.getText().trim();
        String getUnitPrice = unitPrice.getText().trim();
        String getQty = qty.getText().trim();
        String getUsageTime = usageTime.getText().trim();
        String getImportedCountry = importedCountry.getText().trim();

        electronicDevice = new ElectronicDevice();
        brandNewHardware = new BrandNewHardware();
        secondHandHardware = new SecondHandHardware();

        if (getHardwareID.equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter a hardware ID");
        }
        else if (electronicDevice.isHardwareExist(getHardwareID) == true) {
            JOptionPane.showMessageDialog(null, "This hardware ID is already exist !!!", "Message", JOptionPane.ERROR_MESSAGE);
        }
        else if (electronicDevice.isHardwareIDValid(getHardwareID) == false) {
            JOptionPane.showMessageDialog(null, "This hardware ID is invalid. use HW/BN/XXXXX or HW/SEC/XXXXX format.", "Message", JOptionPane.ERROR_MESSAGE);
        }
        else if (getBrandName.equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter the brand name of hardware");
        }
        else if (getUnitPrice.equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter the unit price of hardware");
        } 
        else if (electronicDevice.isHardwareUnitPriceValid(getUnitPrice) == false) {
            JOptionPane.showMessageDialog(null, "The unit price of hardware must be a real number !!!", "Message", JOptionPane.ERROR_MESSAGE);
        }
        else if (getQty.equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter the quantity of hardware");
        }
        else if (electronicDevice.isHardwareQtyValid(getQty) == false) {
            JOptionPane.showMessageDialog(null, "Hardware quantity must be an integer !!!", "Message", JOptionPane.ERROR_MESSAGE);
        }
        else if (getHardwareName.equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter the hardware name");
        }
        else if (getImportedCountry.equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter the imported country of hardware");
        }
        else if ((brandNewHardware.isHardwareIDValid(getHardwareID) == true) && (getHardwareType.equals("Brand New") == false)) {
            JOptionPane.showMessageDialog(null, "Your hardware ID and type is not matched !!!", "Message", JOptionPane.ERROR_MESSAGE);
        }
        else if ((secondHandHardware.isHardwareIDValid(getHardwareID) == true) && (getHardwareType.equals("Second Hand") == false)) {
            JOptionPane.showMessageDialog(null, "Your hardware ID and type is not matched !!!", "Message", JOptionPane.ERROR_MESSAGE);
        }
        else if (electronicDevice.isHardwareUsageTimeValid(getUsageTime) == false) {
            JOptionPane.showMessageDialog(null, "Hardware usage time must be an integer !!!", "Message", JOptionPane.ERROR_MESSAGE);
        }
        else {
            double dUnitprice = Double.parseDouble(getUnitPrice);
            int iQty = Integer.parseInt(getQty);

            if (getUsageTime.isEmpty()) {
                Integer nullableInt;
                nullableInt = null;
                electronicDevice.addHardware(getHardwareID, getHardwareName, getBrandName, getHardwareType, dUnitprice, iQty, getImportedCountry, nullableInt);
            }
            else {
                
                int iUsagetime = Integer.parseInt(getUsageTime);
                electronicDevice.addHardware(getHardwareID, getHardwareName, getBrandName, getHardwareType, dUnitprice, iQty, getImportedCountry, iUsagetime);
            }
            brandName.setText("");
            hardwareID.setText("");
            hardwareName.setText("");
            importedCountry.setText("");
            hardwareType.setSelectedIndex(0);
            usageTime.setText("");
            qty.setText("");
            unitPrice.setText("");
        }
        try {
            electronicDevice = new ElectronicDevice();
            electronicDevice.showHardwareDetails(hardwareTable);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error occurred while loading employee data", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
        String getHardwareID = hardwareID.getText().trim();
        String getHardwareName = hardwareName.getText().trim();
        String getHardwareType = hardwareType.getSelectedItem().toString();
        String getBrandName = brandName.getText().trim();
        String getUnitPrice = unitPrice.getText().trim();
        String getQty = qty.getText().trim();
        String getUsageTime = usageTime.getText().trim();
        String getImportedCountry = importedCountry.getText().trim();

        electronicDevice = new ElectronicDevice();
        brandNewHardware = new BrandNewHardware();
        secondHandHardware = new SecondHandHardware();

        double unitPriceValue = 0.0;
        int qtyValue = 0;
        int usageTimeValue = 0;

        if (getHardwareName.isEmpty()) {
            getHardwareName = null;
        }
        if (getBrandName.isEmpty()) {
            getBrandName = null;
        }
        if (getUnitPrice.isEmpty()) {
            getUnitPrice = null;
        }
        if (getQty.isEmpty()) {
            getQty = null;
        }
        if (getUsageTime.isEmpty()) {
            getUsageTime = null;
        }
        if (getImportedCountry.isEmpty()) {
            getImportedCountry = null;
        }
        if ((brandNewHardware.isHardwareIDValid(getHardwareID) == true) && (getHardwareType.equals("Brand New") == false)) {
            JOptionPane.showMessageDialog(null, "Your hardware ID and type is not matched !!!", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if ((secondHandHardware.isHardwareIDValid(getHardwareID) == true) && (getHardwareType.equals("Second Hand") == false)) {
            JOptionPane.showMessageDialog(null, "Your hardware ID and type is not matched !!!", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (getHardwareID.equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter a hardware ID");
        } else if (!electronicDevice.isHardwareIDValid(getHardwareID)) {
            JOptionPane.showMessageDialog(null, "This hardware ID is invalid. Use HW/BN/XXXXX or HW/SEC/XXXXX format.", "Message", JOptionPane.ERROR_MESSAGE);
        } else if (!electronicDevice.isHardwareExist(getHardwareID)) {
            JOptionPane.showMessageDialog(null, "This hardware ID does not exist.", "Message", JOptionPane.ERROR_MESSAGE);
        } else {
            // Parse and check numeric values
            if (getUnitPrice != null) {
                try {
                    unitPriceValue = Double.parseDouble(getUnitPrice);
                    if (!electronicDevice.isHardwareUnitPriceValid(getUnitPrice)) {
                        JOptionPane.showMessageDialog(null, "Invalid unit price. Please enter a valid non-negative value.", "Error", JOptionPane.ERROR_MESSAGE);
                        return; // Return to avoid further processing
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Invalid unit price. Please enter a valid numeric value.", "Error", JOptionPane.ERROR_MESSAGE);
                    return; // Return to avoid further processing
                }

                // Parse and check numeric values for Quantity
                if (getQty != null) {
                    try {
                        qtyValue = Integer.parseInt(getQty);
                        if (!electronicDevice.isHardwareQtyValid(getQty)) {
                            JOptionPane.showMessageDialog(null, "Invalid quantity. Please enter a valid non-negative integer.", "Error", JOptionPane.ERROR_MESSAGE);
                            return; // Return to avoid further processing
                        }
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(null, "Invalid quantity. Please enter a valid numeric value.", "Error", JOptionPane.ERROR_MESSAGE);
                        return; // Return to avoid further processing
                    }
                }

                // Parse and check numeric values for Usage Time
                if (getUsageTime != null) {
                    try {
                        usageTimeValue = Integer.parseInt(getUsageTime);
                        if (!electronicDevice.isHardwareUsageTimeValid(getUsageTime)) {
                            JOptionPane.showMessageDialog(null, "Invalid usage time. Please enter a valid non-negative integer.", "Error", JOptionPane.ERROR_MESSAGE);
                            return; // Return to avoid further processing
                        }
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(null, "Invalid usage time. Please enter a valid numeric value.", "Error", JOptionPane.ERROR_MESSAGE);
                        return; // Return to avoid further processing
                    }
                }

                // Update the hardware
                electronicDevice.updateHardware(getHardwareID, getHardwareName, getBrandName, getHardwareType, unitPriceValue, qtyValue, getImportedCountry, usageTimeValue);

                // Reset input fields
                hardwareID.setText("");
                hardwareName.setText("");
                brandName.setText("");
                unitPrice.setText("");
                qty.setText("");
                usageTime.setText("");
                importedCountry.setText("");
            }
        }
        try {
            electronicDevice = new ElectronicDevice();
            electronicDevice.showHardwareDetails(hardwareTable);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error occurred while loading employee data", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        String getHardwareID = hardwareID.getText().trim();

        electronicDevice = new ElectronicDevice();

        if (getHardwareID.equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter a hardware ID");
        }
        else if (electronicDevice.isHardwareIDValid(getHardwareID) == false) {
            JOptionPane.showMessageDialog(null, "This hardware ID is invalid. use HW/BN/XXXXX or HW/SEC/XXXXX format.", "Message", JOptionPane.ERROR_MESSAGE);
        }
        else if (electronicDevice.isHardwareExist(getHardwareID) == false) {
            JOptionPane.showMessageDialog(null, "This hardware ID is not exist !!!", "Message", JOptionPane.ERROR_MESSAGE);
        }
        else {
            electronicDevice.deleteHardware(getHardwareID);
            brandName.setText("");
            hardwareID.setText("");
            hardwareName.setText("");
            importedCountry.setText("");
            hardwareType.setSelectedIndex(0);
            usageTime.setText("");
            qty.setText("");
            unitPrice.setText("");
        }
        try {
            electronicDevice = new ElectronicDevice();
            electronicDevice.showHardwareDetails(hardwareTable);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error occurred while loading employee data", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // TODO add your handling code here:
        brandName.setText("");
        hardwareID.setText("");
        hardwareName.setText("");
        importedCountry.setText("");
        hardwareType.setSelectedIndex(0);
        usageTime.setText("");
        qty.setText("");
        unitPrice.setText("");
    }//GEN-LAST:event_clearButtonActionPerformed

    private void hardwareTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hardwareTableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) hardwareTable.getModel();

        int selectedRow = hardwareTable.getSelectedRow();

        // Check if a row is selected
        if (selectedRow != -1) {
            String hWHardwareID = String.valueOf(model.getValueAt(selectedRow, 0));
            String hwHardwareName = String.valueOf(model.getValueAt(selectedRow, 1));
            String hwBrandName = String.valueOf(model.getValueAt(selectedRow, 2));
            String hwHardwareType = String.valueOf(model.getValueAt(selectedRow, 3)).trim();
            double hwUnitPrice = parseDoubleValue(model.getValueAt(selectedRow, 4));

            // Parse qty and usageTime as integers
            int hwQty = parseIntegerValue(model.getValueAt(selectedRow, 5));
            String hwImportedCountry = String.valueOf(model.getValueAt(selectedRow, 6));
            int hwUsageTime = parseIntegerValue(model.getValueAt(selectedRow, 7));

            // Update your UI components with the values
            hardwareID.setText(hWHardwareID);
            hardwareName.setText(hwHardwareName);
            brandName.setText(hwBrandName);
            unitPrice.setText(String.valueOf(hwUnitPrice));
            qty.setText(String.valueOf(hwQty));
            importedCountry.setText(hwImportedCountry);
            usageTime.setText(String.valueOf(hwUsageTime));

            if (hwHardwareType.equalsIgnoreCase("Brand New")) {
                hardwareType.setSelectedIndex(0);
            } else {
                hardwareType.setSelectedIndex(1);
            }
        }
    }//GEN-LAST:event_hardwareTableMouseClicked

    private void paymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentActionPerformed
        // TODO add your handling code here:
        MainPayment mainPayment = new MainPayment();
        mainPayment.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_paymentActionPerformed
    private double parseDoubleValue(Object value) {
        try {
            return Double.parseDouble(String.valueOf(value));
        } catch (NumberFormatException e) {
            e.printStackTrace(); // Or log the error
            return 0.0; // Return a default value or handle the error as needed
        }
    }

    // Helper method to parse integer values with proper error handling
    private int parseIntegerValue(Object value) {
        try {
            return Integer.parseInt(String.valueOf(value));
        } catch (NumberFormatException e) {
            e.printStackTrace(); // Or log the error
            return 0; // Return a default value or handle the error as needed
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HardwareUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HardwareUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HardwareUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HardwareUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HardwareUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JToggleButton backToLogin;
    private javax.swing.JTextField brandName;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton close;
    private javax.swing.JToggleButton customer;
    private javax.swing.JButton deleteButton;
    private javax.swing.JToggleButton employee;
    private javax.swing.JLabel hardwareBackground;
    private javax.swing.JTextField hardwareID;
    private javax.swing.JTextArea hardwareName;
    private javax.swing.JTable hardwareTable;
    private javax.swing.JComboBox<String> hardwareType;
    private javax.swing.JTextField importedCountry;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToggleButton mainDashboard;
    private javax.swing.JToggleButton payment;
    private javax.swing.JTextField qty;
    private javax.swing.JToggleButton repair;
    private javax.swing.JTextField unitPrice;
    private javax.swing.JButton updateButton;
    private javax.swing.JTextField usageTime;
    // End of variables declaration//GEN-END:variables
}
